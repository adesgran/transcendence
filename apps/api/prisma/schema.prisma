// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

//IMPORTANT  => updated_at have to be changed

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider      = "postgresql"
  url           = env("DATABASE_URL")
}

model Channel {
  id           Int           @id @default(autoincrement())
  name         String
  topic        String
  type         ChanType
  password     String?
  created_at   DateTime      @default(now())
  updated_at   DateTime      @default(now()) @updatedAt
  userChannels UserChannel[]
  messages     Message[]
}

model UserChannel {
  id         Int       @id @default(autoincrement())
  user_id    Int
  channel_id Int
  role       Role
  ban        DateTime?
  mute       DateTime?
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  User       User      @relation(fields: [user_id], references: [id])
  Channel    Channel   @relation(fields: [channel_id], references: [id])
  
  @@unique([user_id, channel_id])
}

model User {
  id               Int               @id @default(autoincrement())
  username         String            @unique
  avatar_url       String
  auth42_id        String            @unique
  token            String            @unique
  created_at       DateTime          @default(now())
  updated_at       DateTime          @updatedAt
  userChannels     UserChannel[]
  matches          MatchPlayer[]
  achievement      UserAchievement[]
  friendship_user1 Friendship[]      @relation("user1_friendship")
  friendship_user2 Friendship[]      @relation("user2_friendship")
  sent_requests    FriendRequest[]   @relation("sent_requests")
  received_requests FriendRequest[]  @relation("received_requests")
  blocked_list     Blocklist[]       @relation("block")
  blocked_by       Blocklist[]       @relation("blocked")

}

model Message {
  id         Int      @id @default(autoincrement())
  user_id    Int
  channel_id Int
  content    String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  channel    Channel  @relation(fields: [channel_id], references: [id])
}

model Match {
  id         Int           @id @default(autoincrement())
  on_going   Boolean       @default(true)
  created_at DateTime      @default(now())
  updated_at DateTime      @updatedAt
  players    MatchPlayer[]
}

model MatchPlayer {
  id         Int      @id @default(autoincrement())
  user_id    Int
  match_id   Int
  score      Int
  winner     Boolean
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user       User     @relation(fields: [user_id], references: [id])
  match      Match    @relation(fields: [match_id], references: [id])

  @@unique([user_id, match_id])
}

model UserAchievement {
  id          Int         @id @default(autoincrement())
  user_id     Int
  achievement Achievement
  created_at  DateTime    @default(now())
  updated_at  DateTime    @updatedAt
  user        User        @relation(fields: [user_id], references: [id])

  @@unique([achievement, user_id])
}

model Friendship {
  id         Int      @id @default(autoincrement())
  user1_id   Int
  user2_id   Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user1      User     @relation("user1_friendship", fields: [user1_id], references: [id])
  user2      User     @relation("user2_friendship", fields: [user2_id], references: [id])
}

model FriendRequest {
  id             Int      @id @default(autoincrement())
  sender_id      Int
  receiver_id    Int
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt
  sender         User     @relation("sent_requests", fields: [sender_id], references: [id])
  receiver       User     @relation("received_requests", fields: [receiver_id], references: [id])

  @@unique([sender_id, receiver_id])
}

model Blocklist {
  id         Int      @id @default(autoincrement())
  user_id    Int
  blocked_id Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user       User     @relation("block", fields: [user_id], references: [id])
  blocked    User     @relation("blocked", fields: [blocked_id], references: [id])

  @@unique([user_id, blocked_id])
}

enum ChanType {
  DM
  PUBLIC
  PROTECTED
  PRIVATE
}

enum Role {
  MEMBER
  ADMIN
  OWNER
}

enum Achievement {
    WELCOME
    TASTEOFV
    WINS10PLUS
    WIN10RAW
    NEMESIS
    FIRST
    POINTS100PLUS
    WINSINLESSTHAN1M
    ENDLESSSTAMINA
}
